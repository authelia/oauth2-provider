// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2/handler/rfc8628 (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package mock -destination testing/mock/oauth2_device_auth_storage.go -mock_names Storage=MockRFC8628Storage authelia.com/provider/oauth2/handler/rfc8628 Storage
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	oauth2 "authelia.com/provider/oauth2"
	gomock "go.uber.org/mock/gomock"
)

// MockRFC8628Storage is a mock of Storage interface.
type MockRFC8628Storage struct {
	ctrl     *gomock.Controller
	recorder *MockRFC8628StorageMockRecorder
}

// MockRFC8628StorageMockRecorder is the mock recorder for MockRFC8628Storage.
type MockRFC8628StorageMockRecorder struct {
	mock *MockRFC8628Storage
}

// NewMockRFC8628Storage creates a new mock instance.
func NewMockRFC8628Storage(ctrl *gomock.Controller) *MockRFC8628Storage {
	mock := &MockRFC8628Storage{ctrl: ctrl}
	mock.recorder = &MockRFC8628StorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC8628Storage) EXPECT() *MockRFC8628StorageMockRecorder {
	return m.recorder
}

// CreateDeviceCodeSession mocks base method.
func (m *MockRFC8628Storage) CreateDeviceCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeviceCodeSession indicates an expected call of CreateDeviceCodeSession.
func (mr *MockRFC8628StorageMockRecorder) CreateDeviceCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).CreateDeviceCodeSession), arg0, arg1, arg2)
}

// CreateDeviceUserCodeSession mocks base method.
func (m *MockRFC8628Storage) CreateDeviceUserCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeviceUserCodeSession indicates an expected call of CreateDeviceUserCodeSession.
func (mr *MockRFC8628StorageMockRecorder) CreateDeviceUserCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceUserCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).CreateDeviceUserCodeSession), arg0, arg1, arg2)
}

// GetDeviceCodeSession mocks base method.
func (m *MockRFC8628Storage) GetDeviceCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.Session) (oauth2.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(oauth2.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCodeSession indicates an expected call of GetDeviceCodeSession.
func (mr *MockRFC8628StorageMockRecorder) GetDeviceCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).GetDeviceCodeSession), arg0, arg1, arg2)
}

// GetDeviceUserCodeSession mocks base method.
func (m *MockRFC8628Storage) GetDeviceUserCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.Session) (oauth2.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(oauth2.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceUserCodeSession indicates an expected call of GetDeviceUserCodeSession.
func (mr *MockRFC8628StorageMockRecorder) GetDeviceUserCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceUserCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).GetDeviceUserCodeSession), arg0, arg1, arg2)
}

// InvalidateDeviceCodeSession mocks base method.
func (m *MockRFC8628Storage) InvalidateDeviceCodeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateDeviceCodeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateDeviceCodeSession indicates an expected call of InvalidateDeviceCodeSession.
func (mr *MockRFC8628StorageMockRecorder) InvalidateDeviceCodeSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateDeviceCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).InvalidateDeviceCodeSession), arg0, arg1)
}

// InvalidateDeviceUserCodeSession mocks base method.
func (m *MockRFC8628Storage) InvalidateDeviceUserCodeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateDeviceUserCodeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateDeviceUserCodeSession indicates an expected call of InvalidateDeviceUserCodeSession.
func (mr *MockRFC8628StorageMockRecorder) InvalidateDeviceUserCodeSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateDeviceUserCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).InvalidateDeviceUserCodeSession), arg0, arg1)
}

// UpdateDeviceCodeSession mocks base method.
func (m *MockRFC8628Storage) UpdateDeviceCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceCodeSession indicates an expected call of UpdateDeviceCodeSession.
func (mr *MockRFC8628StorageMockRecorder) UpdateDeviceCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).UpdateDeviceCodeSession), arg0, arg1, arg2)
}

// UpdateDeviceUserCodeSession mocks base method.
func (m *MockRFC8628Storage) UpdateDeviceUserCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceUserCodeSession indicates an expected call of UpdateDeviceUserCodeSession.
func (mr *MockRFC8628StorageMockRecorder) UpdateDeviceUserCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceUserCodeSession", reflect.TypeOf((*MockRFC8628Storage)(nil).UpdateDeviceUserCodeSession), arg0, arg1, arg2)
}
