// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2 (interfaces: ClientSecret)
//
// Generated by this command:
//
//	mockgen -package mock -destination testing/mock/client_secret.go authelia.com/provider/oauth2 ClientSecret
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientSecret is a mock of ClientSecret interface.
type MockClientSecret struct {
	ctrl     *gomock.Controller
	recorder *MockClientSecretMockRecorder
	isgomock struct{}
}

// MockClientSecretMockRecorder is the mock recorder for MockClientSecret.
type MockClientSecretMockRecorder struct {
	mock *MockClientSecret
}

// NewMockClientSecret creates a new mock instance.
func NewMockClientSecret(ctrl *gomock.Controller) *MockClientSecret {
	mock := &MockClientSecret{ctrl: ctrl}
	mock.recorder = &MockClientSecretMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSecret) EXPECT() *MockClientSecretMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockClientSecret) Compare(ctx context.Context, secret []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockClientSecretMockRecorder) Compare(ctx, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockClientSecret)(nil).Compare), ctx, secret)
}

// GetPlainTextValue mocks base method.
func (m *MockClientSecret) GetPlainTextValue() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlainTextValue")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlainTextValue indicates an expected call of GetPlainTextValue.
func (mr *MockClientSecretMockRecorder) GetPlainTextValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlainTextValue", reflect.TypeOf((*MockClientSecret)(nil).GetPlainTextValue))
}

// IsPlainText mocks base method.
func (m *MockClientSecret) IsPlainText() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPlainText")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPlainText indicates an expected call of IsPlainText.
func (mr *MockClientSecretMockRecorder) IsPlainText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPlainText", reflect.TypeOf((*MockClientSecret)(nil).IsPlainText))
}

// Valid mocks base method.
func (m *MockClientSecret) Valid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Valid indicates an expected call of Valid.
func (mr *MockClientSecretMockRecorder) Valid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockClientSecret)(nil).Valid))
}
