// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2/handler/rfc8628 (interfaces: RFC8628CodeStorage)
//
// Generated by this command:
//
//	mockgen -package internal -destination internal/oauth2_device_auth_storage.go authelia.com/provider/oauth2/handler/rfc8628 RFC8628CodeStorage
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	oauth2 "authelia.com/provider/oauth2"
	gomock "go.uber.org/mock/gomock"
)

// MockRFC8628CodeStorage is a mock of RFC8628CodeStorage interface.
type MockRFC8628CodeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRFC8628CodeStorageMockRecorder
}

// MockRFC8628CodeStorageMockRecorder is the mock recorder for MockRFC8628CodeStorage.
type MockRFC8628CodeStorageMockRecorder struct {
	mock *MockRFC8628CodeStorage
}

// NewMockRFC8628CodeStorage creates a new mock instance.
func NewMockRFC8628CodeStorage(ctrl *gomock.Controller) *MockRFC8628CodeStorage {
	mock := &MockRFC8628CodeStorage{ctrl: ctrl}
	mock.recorder = &MockRFC8628CodeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRFC8628CodeStorage) EXPECT() *MockRFC8628CodeStorageMockRecorder {
	return m.recorder
}

// CreateDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) CreateDeviceCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeviceCodeSession indicates an expected call of CreateDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) CreateDeviceCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).CreateDeviceCodeSession), arg0, arg1, arg2)
}

// CreateUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) CreateUserCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserCodeSession indicates an expected call of CreateUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) CreateUserCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).CreateUserCodeSession), arg0, arg1, arg2)
}

// GetDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) GetDeviceCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.Session) (oauth2.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(oauth2.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceCodeSession indicates an expected call of GetDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) GetDeviceCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).GetDeviceCodeSession), arg0, arg1, arg2)
}

// GetUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) GetUserCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.Session) (oauth2.DeviceAuthorizeRequester, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(oauth2.DeviceAuthorizeRequester)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCodeSession indicates an expected call of GetUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) GetUserCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).GetUserCodeSession), arg0, arg1, arg2)
}

// InvalidateDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) InvalidateDeviceCodeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateDeviceCodeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateDeviceCodeSession indicates an expected call of InvalidateDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) InvalidateDeviceCodeSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).InvalidateDeviceCodeSession), arg0, arg1)
}

// InvalidateUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) InvalidateUserCodeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserCodeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserCodeSession indicates an expected call of InvalidateUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) InvalidateUserCodeSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).InvalidateUserCodeSession), arg0, arg1)
}

// UpdateDeviceCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) UpdateDeviceCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceCodeSession indicates an expected call of UpdateDeviceCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) UpdateDeviceCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).UpdateDeviceCodeSession), arg0, arg1, arg2)
}

// UpdateUserCodeSession mocks base method.
func (m *MockRFC8628CodeStorage) UpdateUserCodeSession(arg0 context.Context, arg1 string, arg2 oauth2.DeviceAuthorizeRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCodeSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCodeSession indicates an expected call of UpdateUserCodeSession.
func (mr *MockRFC8628CodeStorageMockRecorder) UpdateUserCodeSession(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCodeSession", reflect.TypeOf((*MockRFC8628CodeStorage)(nil).UpdateUserCodeSession), arg0, arg1, arg2)
}
