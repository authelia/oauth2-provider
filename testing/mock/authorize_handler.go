// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2 (interfaces: AuthorizeEndpointHandler)
//
// Generated by this command:
//
//	mockgen -package mock -destination testing/mock/authorize_handler.go authelia.com/provider/oauth2 AuthorizeEndpointHandler
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	oauth2 "authelia.com/provider/oauth2"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizeEndpointHandler is a mock of AuthorizeEndpointHandler interface.
type MockAuthorizeEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizeEndpointHandlerMockRecorder
}

// MockAuthorizeEndpointHandlerMockRecorder is the mock recorder for MockAuthorizeEndpointHandler.
type MockAuthorizeEndpointHandlerMockRecorder struct {
	mock *MockAuthorizeEndpointHandler
}

// NewMockAuthorizeEndpointHandler creates a new mock instance.
func NewMockAuthorizeEndpointHandler(ctrl *gomock.Controller) *MockAuthorizeEndpointHandler {
	mock := &MockAuthorizeEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockAuthorizeEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizeEndpointHandler) EXPECT() *MockAuthorizeEndpointHandlerMockRecorder {
	return m.recorder
}

// HandleAuthorizeEndpointRequest mocks base method.
func (m *MockAuthorizeEndpointHandler) HandleAuthorizeEndpointRequest(arg0 context.Context, arg1 oauth2.AuthorizeRequester, arg2 oauth2.AuthorizeResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAuthorizeEndpointRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAuthorizeEndpointRequest indicates an expected call of HandleAuthorizeEndpointRequest.
func (mr *MockAuthorizeEndpointHandlerMockRecorder) HandleAuthorizeEndpointRequest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAuthorizeEndpointRequest", reflect.TypeOf((*MockAuthorizeEndpointHandler)(nil).HandleAuthorizeEndpointRequest), arg0, arg1, arg2)
}
