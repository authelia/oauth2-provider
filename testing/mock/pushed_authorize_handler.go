// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2 (interfaces: PushedAuthorizeEndpointHandler)
//
// Generated by this command:
//
//	mockgen -package mock -destination testing/mock/pushed_authorize_handler.go authelia.com/provider/oauth2 PushedAuthorizeEndpointHandler
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	oauth2 "authelia.com/provider/oauth2"
	gomock "go.uber.org/mock/gomock"
)

// MockPushedAuthorizeEndpointHandler is a mock of PushedAuthorizeEndpointHandler interface.
type MockPushedAuthorizeEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPushedAuthorizeEndpointHandlerMockRecorder
	isgomock struct{}
}

// MockPushedAuthorizeEndpointHandlerMockRecorder is the mock recorder for MockPushedAuthorizeEndpointHandler.
type MockPushedAuthorizeEndpointHandlerMockRecorder struct {
	mock *MockPushedAuthorizeEndpointHandler
}

// NewMockPushedAuthorizeEndpointHandler creates a new mock instance.
func NewMockPushedAuthorizeEndpointHandler(ctrl *gomock.Controller) *MockPushedAuthorizeEndpointHandler {
	mock := &MockPushedAuthorizeEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockPushedAuthorizeEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushedAuthorizeEndpointHandler) EXPECT() *MockPushedAuthorizeEndpointHandlerMockRecorder {
	return m.recorder
}

// HandlePushedAuthorizeEndpointRequest mocks base method.
func (m *MockPushedAuthorizeEndpointHandler) HandlePushedAuthorizeEndpointRequest(ctx context.Context, requester oauth2.AuthorizeRequester, responder oauth2.PushedAuthorizeResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePushedAuthorizeEndpointRequest", ctx, requester, responder)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePushedAuthorizeEndpointRequest indicates an expected call of HandlePushedAuthorizeEndpointRequest.
func (mr *MockPushedAuthorizeEndpointHandlerMockRecorder) HandlePushedAuthorizeEndpointRequest(ctx, requester, responder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePushedAuthorizeEndpointRequest", reflect.TypeOf((*MockPushedAuthorizeEndpointHandler)(nil).HandlePushedAuthorizeEndpointRequest), ctx, requester, responder)
}
