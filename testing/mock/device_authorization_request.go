// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2 (interfaces: DeviceAuthorizeRequester)
//
// Generated by this command:
//
//	mockgen -package mock -destination testing/mock/device_authorization_request.go authelia.com/provider/oauth2 DeviceAuthorizeRequester
//

// Package mock is a generated GoMock package.
package mock

import (
	url "net/url"
	reflect "reflect"
	time "time"

	oauth2 "authelia.com/provider/oauth2"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceAuthorizeRequester is a mock of DeviceAuthorizeRequester interface.
type MockDeviceAuthorizeRequester struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceAuthorizeRequesterMockRecorder
	isgomock struct{}
}

// MockDeviceAuthorizeRequesterMockRecorder is the mock recorder for MockDeviceAuthorizeRequester.
type MockDeviceAuthorizeRequesterMockRecorder struct {
	mock *MockDeviceAuthorizeRequester
}

// NewMockDeviceAuthorizeRequester creates a new mock instance.
func NewMockDeviceAuthorizeRequester(ctrl *gomock.Controller) *MockDeviceAuthorizeRequester {
	mock := &MockDeviceAuthorizeRequester{ctrl: ctrl}
	mock.recorder = &MockDeviceAuthorizeRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceAuthorizeRequester) EXPECT() *MockDeviceAuthorizeRequesterMockRecorder {
	return m.recorder
}

// AppendRequestedScope mocks base method.
func (m *MockDeviceAuthorizeRequester) AppendRequestedScope(scope string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendRequestedScope", scope)
}

// AppendRequestedScope indicates an expected call of AppendRequestedScope.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) AppendRequestedScope(scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRequestedScope", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).AppendRequestedScope), scope)
}

// GetClient mocks base method.
func (m *MockDeviceAuthorizeRequester) GetClient() oauth2.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(oauth2.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetClient))
}

// GetDeviceCodeSignature mocks base method.
func (m *MockDeviceAuthorizeRequester) GetDeviceCodeSignature() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCodeSignature")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceCodeSignature indicates an expected call of GetDeviceCodeSignature.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetDeviceCodeSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCodeSignature", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetDeviceCodeSignature))
}

// GetGrantedAudience mocks base method.
func (m *MockDeviceAuthorizeRequester) GetGrantedAudience() oauth2.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantedAudience")
	ret0, _ := ret[0].(oauth2.Arguments)
	return ret0
}

// GetGrantedAudience indicates an expected call of GetGrantedAudience.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetGrantedAudience() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantedAudience", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetGrantedAudience))
}

// GetGrantedScopes mocks base method.
func (m *MockDeviceAuthorizeRequester) GetGrantedScopes() oauth2.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantedScopes")
	ret0, _ := ret[0].(oauth2.Arguments)
	return ret0
}

// GetGrantedScopes indicates an expected call of GetGrantedScopes.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetGrantedScopes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantedScopes", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetGrantedScopes))
}

// GetID mocks base method.
func (m *MockDeviceAuthorizeRequester) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetID))
}

// GetLastChecked mocks base method.
func (m *MockDeviceAuthorizeRequester) GetLastChecked() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChecked")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastChecked indicates an expected call of GetLastChecked.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetLastChecked() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChecked", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetLastChecked))
}

// GetRequestForm mocks base method.
func (m *MockDeviceAuthorizeRequester) GetRequestForm() url.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestForm")
	ret0, _ := ret[0].(url.Values)
	return ret0
}

// GetRequestForm indicates an expected call of GetRequestForm.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetRequestForm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestForm", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetRequestForm))
}

// GetRequestedAt mocks base method.
func (m *MockDeviceAuthorizeRequester) GetRequestedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetRequestedAt indicates an expected call of GetRequestedAt.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetRequestedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedAt", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetRequestedAt))
}

// GetRequestedAudience mocks base method.
func (m *MockDeviceAuthorizeRequester) GetRequestedAudience() oauth2.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedAudience")
	ret0, _ := ret[0].(oauth2.Arguments)
	return ret0
}

// GetRequestedAudience indicates an expected call of GetRequestedAudience.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetRequestedAudience() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedAudience", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetRequestedAudience))
}

// GetRequestedScopes mocks base method.
func (m *MockDeviceAuthorizeRequester) GetRequestedScopes() oauth2.Arguments {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestedScopes")
	ret0, _ := ret[0].(oauth2.Arguments)
	return ret0
}

// GetRequestedScopes indicates an expected call of GetRequestedScopes.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetRequestedScopes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestedScopes", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetRequestedScopes))
}

// GetSession mocks base method.
func (m *MockDeviceAuthorizeRequester) GetSession() oauth2.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession")
	ret0, _ := ret[0].(oauth2.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetSession))
}

// GetStatus mocks base method.
func (m *MockDeviceAuthorizeRequester) GetStatus() oauth2.DeviceAuthorizeStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(oauth2.DeviceAuthorizeStatus)
	return ret0
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetStatus))
}

// GetUserCodeSignature mocks base method.
func (m *MockDeviceAuthorizeRequester) GetUserCodeSignature() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCodeSignature")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserCodeSignature indicates an expected call of GetUserCodeSignature.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GetUserCodeSignature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCodeSignature", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GetUserCodeSignature))
}

// GrantAudience mocks base method.
func (m *MockDeviceAuthorizeRequester) GrantAudience(audience string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrantAudience", audience)
}

// GrantAudience indicates an expected call of GrantAudience.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GrantAudience(audience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAudience", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GrantAudience), audience)
}

// GrantScope mocks base method.
func (m *MockDeviceAuthorizeRequester) GrantScope(scope string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrantScope", scope)
}

// GrantScope indicates an expected call of GrantScope.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) GrantScope(scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantScope", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).GrantScope), scope)
}

// Merge mocks base method.
func (m *MockDeviceAuthorizeRequester) Merge(requester oauth2.Requester) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Merge", requester)
}

// Merge indicates an expected call of Merge.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) Merge(requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).Merge), requester)
}

// Sanitize mocks base method.
func (m *MockDeviceAuthorizeRequester) Sanitize(allowedParameters []string) oauth2.Requester {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sanitize", allowedParameters)
	ret0, _ := ret[0].(oauth2.Requester)
	return ret0
}

// Sanitize indicates an expected call of Sanitize.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) Sanitize(allowedParameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sanitize", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).Sanitize), allowedParameters)
}

// SetDeviceCodeSignature mocks base method.
func (m *MockDeviceAuthorizeRequester) SetDeviceCodeSignature(signature string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceCodeSignature", signature)
}

// SetDeviceCodeSignature indicates an expected call of SetDeviceCodeSignature.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetDeviceCodeSignature(signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceCodeSignature", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetDeviceCodeSignature), signature)
}

// SetID mocks base method.
func (m *MockDeviceAuthorizeRequester) SetID(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetID", id)
}

// SetID indicates an expected call of SetID.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetID", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetID), id)
}

// SetLastChecked mocks base method.
func (m *MockDeviceAuthorizeRequester) SetLastChecked(lastChecked time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastChecked", lastChecked)
}

// SetLastChecked indicates an expected call of SetLastChecked.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetLastChecked(lastChecked any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastChecked", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetLastChecked), lastChecked)
}

// SetRequestedAudience mocks base method.
func (m *MockDeviceAuthorizeRequester) SetRequestedAudience(audience oauth2.Arguments) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequestedAudience", audience)
}

// SetRequestedAudience indicates an expected call of SetRequestedAudience.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetRequestedAudience(audience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestedAudience", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetRequestedAudience), audience)
}

// SetRequestedScopes mocks base method.
func (m *MockDeviceAuthorizeRequester) SetRequestedScopes(scopes oauth2.Arguments) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequestedScopes", scopes)
}

// SetRequestedScopes indicates an expected call of SetRequestedScopes.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetRequestedScopes(scopes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequestedScopes", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetRequestedScopes), scopes)
}

// SetSession mocks base method.
func (m *MockDeviceAuthorizeRequester) SetSession(session oauth2.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", session)
}

// SetSession indicates an expected call of SetSession.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetSession(session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetSession), session)
}

// SetStatus mocks base method.
func (m *MockDeviceAuthorizeRequester) SetStatus(status oauth2.DeviceAuthorizeStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", status)
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetStatus), status)
}

// SetUserCodeSignature mocks base method.
func (m *MockDeviceAuthorizeRequester) SetUserCodeSignature(signature string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserCodeSignature", signature)
}

// SetUserCodeSignature indicates an expected call of SetUserCodeSignature.
func (mr *MockDeviceAuthorizeRequesterMockRecorder) SetUserCodeSignature(signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCodeSignature", reflect.TypeOf((*MockDeviceAuthorizeRequester)(nil).SetUserCodeSignature), signature)
}
