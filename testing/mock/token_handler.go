// Code generated by MockGen. DO NOT EDIT.
// Source: authelia.com/provider/oauth2 (interfaces: TokenEndpointHandler)
//
// Generated by this command:
//
//	mockgen -package mock -destination testing/mock/token_handler.go authelia.com/provider/oauth2 TokenEndpointHandler
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	oauth2 "authelia.com/provider/oauth2"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenEndpointHandler is a mock of TokenEndpointHandler interface.
type MockTokenEndpointHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTokenEndpointHandlerMockRecorder
	isgomock struct{}
}

// MockTokenEndpointHandlerMockRecorder is the mock recorder for MockTokenEndpointHandler.
type MockTokenEndpointHandlerMockRecorder struct {
	mock *MockTokenEndpointHandler
}

// NewMockTokenEndpointHandler creates a new mock instance.
func NewMockTokenEndpointHandler(ctrl *gomock.Controller) *MockTokenEndpointHandler {
	mock := &MockTokenEndpointHandler{ctrl: ctrl}
	mock.recorder = &MockTokenEndpointHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenEndpointHandler) EXPECT() *MockTokenEndpointHandlerMockRecorder {
	return m.recorder
}

// CanHandleTokenEndpointRequest mocks base method.
func (m *MockTokenEndpointHandler) CanHandleTokenEndpointRequest(ctx context.Context, requester oauth2.AccessRequester) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanHandleTokenEndpointRequest", ctx, requester)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanHandleTokenEndpointRequest indicates an expected call of CanHandleTokenEndpointRequest.
func (mr *MockTokenEndpointHandlerMockRecorder) CanHandleTokenEndpointRequest(ctx, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanHandleTokenEndpointRequest", reflect.TypeOf((*MockTokenEndpointHandler)(nil).CanHandleTokenEndpointRequest), ctx, requester)
}

// CanSkipClientAuth mocks base method.
func (m *MockTokenEndpointHandler) CanSkipClientAuth(ctx context.Context, requester oauth2.AccessRequester) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSkipClientAuth", ctx, requester)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CanSkipClientAuth indicates an expected call of CanSkipClientAuth.
func (mr *MockTokenEndpointHandlerMockRecorder) CanSkipClientAuth(ctx, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSkipClientAuth", reflect.TypeOf((*MockTokenEndpointHandler)(nil).CanSkipClientAuth), ctx, requester)
}

// HandleTokenEndpointRequest mocks base method.
func (m *MockTokenEndpointHandler) HandleTokenEndpointRequest(ctx context.Context, requester oauth2.AccessRequester) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTokenEndpointRequest", ctx, requester)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTokenEndpointRequest indicates an expected call of HandleTokenEndpointRequest.
func (mr *MockTokenEndpointHandlerMockRecorder) HandleTokenEndpointRequest(ctx, requester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTokenEndpointRequest", reflect.TypeOf((*MockTokenEndpointHandler)(nil).HandleTokenEndpointRequest), ctx, requester)
}

// PopulateTokenEndpointResponse mocks base method.
func (m *MockTokenEndpointHandler) PopulateTokenEndpointResponse(ctx context.Context, requester oauth2.AccessRequester, responder oauth2.AccessResponder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateTokenEndpointResponse", ctx, requester, responder)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateTokenEndpointResponse indicates an expected call of PopulateTokenEndpointResponse.
func (mr *MockTokenEndpointHandlerMockRecorder) PopulateTokenEndpointResponse(ctx, requester, responder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateTokenEndpointResponse", reflect.TypeOf((*MockTokenEndpointHandler)(nil).PopulateTokenEndpointResponse), ctx, requester, responder)
}
